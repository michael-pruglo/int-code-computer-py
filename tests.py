import unittest
from IntCodeImpl import *


class IntCodeTest(unittest.TestCase):
    def test_ctor(self):
        ic_default = IntCode()
        self.assertEqual(([], []), ic_default.get())

        MINIMAL_PROGRAM = [99]
        self.assertEqual(
            (MINIMAL_PROGRAM, []),
            run_intcode_program(MINIMAL_PROGRAM)
        )

        prog = [1,2,3,4,99]
        ic_mem = IntCode(prog)
        self.assertEqual((prog, []), ic_mem.get())

    def test_opcode1(self):
        self.assertEqual(
            ([2,0,0,0,99], []),
            run_intcode_program([1,0,0,0,99])
        )
        self.assertEqual(
            ([30,1,1,4,2,5,6,0,99], []),
            run_intcode_program([1,1,1,4,99,5,6,0,99])
        )
        self.assertEqual(
            ([1101,100,-1,4,99], []),
            run_intcode_program([1101,100,-1,4,0])
        )

    def test_opcode2(self):
        self.assertEqual(
            ([2,3,0,6,99], []),
            run_intcode_program([2,3,0,3,99])
        )
        self.assertEqual(
            ([2,4,4,5,99,9801], []),
            run_intcode_program([2,4,4,5,99,0])
        )
        self.assertEqual(
            ([1002,4,3,4,99], []),
            run_intcode_program([1002,4,3,4,33])
        )

    def test_opcodes12(self):
        self.assertEqual(
            ([3500,9,10,70,2,3,11,0,99,30,40,50], []),
            run_intcode_program([1,9,10,3,2,3,11,0,99,30,40,50])
        )
        self.assertEqual(
            12490719,
            run_intcode_program(
                [1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,13,1,19,1,19,6,23,1,23,6,27,1,13,27,31,2,13,31,35,1,5,35,39,2,39,13,43,1,10,43,47,2,13,47,51,1,6,51,55,2,55,13,59,1,59,10,63,1,63,10,67,2,10,67,71,1,6,71,75,1,10,75,79,1,79,9,83,2,83,6,87,2,87,9,91,1,5,91,95,1,6,95,99,1,99,9,103,2,10,103,107,1,107,6,111,2,9,111,115,1,5,115,119,1,10,119,123,1,2,123,127,1,127,6,0,99,2,14,0,0]
            )[0][0]
        )
        self.assertEqual(
            19690720,
            run_intcode_program(
                [1,20,3,3,1,1,2,3,1,3,4,3,1,5,0,3,2,13,1,19,1,19,6,23,1,23,6,27,1,13,27,31,2,13,31,35,1,5,35,39,2,39,13,43,1,10,43,47,2,13,47,51,1,6,51,55,2,55,13,59,1,59,10,63,1,63,10,67,2,10,67,71,1,6,71,75,1,10,75,79,1,79,9,83,2,83,6,87,2,87,9,91,1,5,91,95,1,6,95,99,1,99,9,103,2,10,103,107,1,107,6,111,2,9,111,115,1,5,115,119,1,10,119,123,1,2,123,127,1,127,6,0,99,2,14,0,0],
            )[0][0]
        )

    def test_opcode3(self):
        self.assertEqual(
            ([8,7,1,7,7,0,99,4], []),
            run_intcode_program([3,7,1,7,7,0,99,0], [4])
        )

    def test_opcode4(self):
        self.assertEqual(
            ([4,0,99], [4]),
            run_intcode_program([4,0,99])
        )
        self.assertEqual(
            ([104,2,99], [2]),
            run_intcode_program([104,2,99])
        )

    def test_opcodes34(self):
        for x in [0, 3, 198]:
            self.assertEqual(
                [x],
                run_intcode_program([3,0,4,0,99], [x])[1]
            )

    def test_opcodes1234(self):
        self.assertEqual(
            [0,0,0,0,0,0,0,0,0,12896948],
            run_intcode_program(
                [3,225,1,225,6,6,1100,1,238,225,104,0,1102,46,47,225,2,122,130,224,101,-1998,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1102,61,51,225,102,32,92,224,101,-800,224,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1101,61,64,225,1001,118,25,224,101,-106,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1102,33,25,225,1102,73,67,224,101,-4891,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,14,81,225,1102,17,74,225,1102,52,67,225,1101,94,27,225,101,71,39,224,101,-132,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1002,14,38,224,101,-1786,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,65,126,224,1001,224,-128,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1101,81,40,224,1001,224,-121,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,374,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,434,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,464,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1007,677,677,224,1002,223,2,223,1005,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,524,1001,223,1,223,7,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,107,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,614,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,629,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226],
                [1]
            )[1]
        )

    def test_opcode5(self):
        for x in [-4, 0, 167]:
            self.assertEqual(
                [int(x != 0)],
                run_intcode_program([3,3,1105,-1,9,1101,0,0,12,4,12,99,1], [x])[1]
            )

    def test_opcode6(self):
        for x in [-7, 0, 89]:
            self.assertEqual(
                [int(x != 0)],
                run_intcode_program([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9], [x])[1]
            )

    def test_opcode7(self):
        for x in [-11, 0, 2, 8, 23]:
            self.assertEqual(
                [int(x < 8)],
                run_intcode_program([3,9,7,9,10,9,4,9,99,-1,8], [x])[1]
            )
        for x in [-12, 0, 4, 8, 21]:
            self.assertEqual(
                [int(x < 8)],
                run_intcode_program([3,3,1107,-1,8,3,4,3,99], [x])[1]
            )

    def test_opcode8(self):
        for x in [-13, 0, 1, 8, 44]:
            self.assertEqual(
                [int(x == 8)],
                run_intcode_program([3,9,8,9,10,9,4,9,99,-1,8], [x])[1]
            )
        for x in [-11, 0, 5, 8, 77]:
            self.assertEqual(
                [int(x == 8)],
                run_intcode_program([3,3,1108,-1,8,3,4,3,99], [x])[1]
            )

    def test_opcodes12345678(self):
        for x in [-13, 0, 2, 8, 64]:
            self.assertEqual(
                [999 if x<8 else 1000 if x==8 else 1001],
                run_intcode_program(
                    [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99],
                    [x]
                )[1]
            )

    def test_opcode9(self):
        self.assertEqual(
            [51],
            run_intcode_program([109,10,2202,1,2,5,4,5,99,0,0,17,3])[1]
        )

    def test_opcode93(self):
        self.assertEqual(
            ([8,7,1,7,7,0,99,4], []),
            run_intcode_program([203,7,1,7,7,0,99,0], [4])
        )
        self.assertEqual(
            [4],
            run_intcode_program([109,7,203,1,4,8,99,0,0], [4])[1]
        )

    def test_opcodes123456789_modes012(self):
        self.assertEqual(
            [3601950151],
            run_intcode_program(
                [1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,0,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,30,1016,1101,37,0,1005,1101,362,0,1023,1101,0,20,1014,1101,39,0,1013,1102,34,1,1007,1101,682,0,1027,1102,664,1,1025,1102,1,655,1028,1101,0,26,1002,1102,1,38,1015,1101,669,0,1024,1101,0,28,1017,1102,1,21,1000,1101,0,27,1012,1102,1,29,1008,1102,1,23,1019,1101,0,24,1011,1101,685,0,1026,1102,646,1,1029,1102,1,369,1022,1101,0,31,1003,1102,1,36,1001,1101,0,0,1020,1102,1,35,1009,1101,32,0,1010,1101,0,1,1021,1102,33,1,1004,1101,22,0,1006,1102,1,25,1018,109,14,1205,6,197,1001,64,1,64,1105,1,199,4,187,1002,64,2,64,109,-4,21107,40,39,9,1005,1019,219,1001,64,1,64,1105,1,221,4,205,1002,64,2,64,109,9,1206,1,239,4,227,1001,64,1,64,1106,0,239,1002,64,2,64,109,-9,2101,0,-8,63,1008,63,26,63,1005,63,261,4,245,1106,0,265,1001,64,1,64,1002,64,2,64,109,-6,2108,37,1,63,1005,63,287,4,271,1001,64,1,64,1105,1,287,1002,64,2,64,109,15,21108,41,44,-2,1005,1017,307,1001,64,1,64,1106,0,309,4,293,1002,64,2,64,109,-16,1207,1,34,63,1005,63,327,4,315,1105,1,331,1001,64,1,64,1002,64,2,64,109,8,1208,-9,29,63,1005,63,347,1106,0,353,4,337,1001,64,1,64,1002,64,2,64,109,4,2105,1,8,1001,64,1,64,1105,1,371,4,359,1002,64,2,64,109,-22,1201,9,0,63,1008,63,27,63,1005,63,391,1106,0,397,4,377,1001,64,1,64,1002,64,2,64,109,18,21107,42,43,5,1005,1016,415,4,403,1106,0,419,1001,64,1,64,1002,64,2,64,109,-8,1201,2,0,63,1008,63,37,63,1005,63,441,4,425,1105,1,445,1001,64,1,64,1002,64,2,64,109,27,1205,-9,463,4,451,1001,64,1,64,1106,0,463,1002,64,2,64,109,-1,1206,-8,475,1105,1,481,4,469,1001,64,1,64,1002,64,2,64,109,-6,21101,43,0,-8,1008,1015,43,63,1005,63,507,4,487,1001,64,1,64,1106,0,507,1002,64,2,64,109,-15,2101,0,-3,63,1008,63,35,63,1005,63,531,1001,64,1,64,1106,0,533,4,513,1002,64,2,64,109,-2,2102,1,-6,63,1008,63,18,63,1005,63,553,1105,1,559,4,539,1001,64,1,64,1002,64,2,64,109,7,21102,44,1,3,1008,1016,44,63,1005,63,581,4,565,1105,1,585,1001,64,1,64,1002,64,2,64,109,-11,1202,7,1,63,1008,63,34,63,1005,63,609,1001,64,1,64,1105,1,611,4,591,1002,64,2,64,109,6,1202,1,1,63,1008,63,35,63,1005,63,637,4,617,1001,64,1,64,1106,0,637,1002,64,2,64,109,16,2106,0,4,4,643,1001,64,1,64,1106,0,655,1002,64,2,64,109,-1,2105,1,1,4,661,1106,0,673,1001,64,1,64,1002,64,2,64,109,5,2106,0,-1,1105,1,691,4,679,1001,64,1,64,1002,64,2,64,109,-24,1208,-2,26,63,1005,63,709,4,697,1105,1,713,1001,64,1,64,1002,64,2,64,109,-10,2102,1,6,63,1008,63,21,63,1005,63,735,4,719,1105,1,739,1001,64,1,64,1002,64,2,64,109,25,21108,45,45,-9,1005,1010,757,4,745,1106,0,761,1001,64,1,64,1002,64,2,64,109,-12,1207,-7,20,63,1005,63,777,1106,0,783,4,767,1001,64,1,64,1002,64,2,64,109,-13,2108,22,6,63,1005,63,799,1106,0,805,4,789,1001,64,1,64,1002,64,2,64,109,17,21102,46,1,0,1008,1011,45,63,1005,63,825,1105,1,831,4,811,1001,64,1,64,1002,64,2,64,109,-6,2107,21,1,63,1005,63,849,4,837,1105,1,853,1001,64,1,64,1002,64,2,64,109,-3,2107,27,0,63,1005,63,873,1001,64,1,64,1105,1,875,4,859,1002,64,2,64,109,12,21101,47,0,0,1008,1014,48,63,1005,63,899,1001,64,1,64,1105,1,901,4,881,4,64,99,21102,27,1,1,21101,0,915,0,1105,1,922,21201,1,42931,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,942,0,0,1106,0,922,21202,1,1,-1,21201,-2,-3,1,21102,1,957,0,1106,0,922,22201,1,-1,-2,1106,0,968,22101,0,-2,-2,109,-3,2106,0,0],
                [1]
            )[1]
        )

    def test_day3(self):
        self.assertEqual(
            [7704130],
            run_intcode_program(
                [3,225,1,225,6,6,1100,1,238,225,104,0,1102,46,47,225,2,122,130,224,101,-1998,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1102,61,51,225,102,32,92,224,101,-800,224,224,4,224,1002,223,8,223,1001,224,1,224,1,223,224,223,1101,61,64,225,1001,118,25,224,101,-106,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,1102,33,25,225,1102,73,67,224,101,-4891,224,224,4,224,1002,223,8,223,1001,224,4,224,1,224,223,223,1101,14,81,225,1102,17,74,225,1102,52,67,225,1101,94,27,225,101,71,39,224,101,-132,224,224,4,224,1002,223,8,223,101,5,224,224,1,224,223,223,1002,14,38,224,101,-1786,224,224,4,224,102,8,223,223,1001,224,2,224,1,223,224,223,1,65,126,224,1001,224,-128,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1101,81,40,224,1001,224,-121,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,359,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,374,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,404,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,434,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,449,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,464,1001,223,1,223,1007,677,226,224,1002,223,2,223,1006,224,479,1001,223,1,223,1007,677,677,224,1002,223,2,223,1005,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,509,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,524,1001,223,1,223,7,226,226,224,102,2,223,223,1005,224,539,1001,223,1,223,8,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,107,677,226,224,102,2,223,223,1006,224,569,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,584,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,599,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,614,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,629,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,659,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226],
                [5]
            )[1]
        )

    def test_stop_at_99(self):
        run_intcode_program([1,0,0,1,2,0,1,2,99], [])
        with self.assertRaises(IntCode.ExecutionError):
            run_intcode_program([1,0,0,1,2,0,1,2], [])

    def test_unknown_opcode(self):
        UNKNOWN_OPCODE = 33
        with self.assertRaises(IntCode.ExecutionError):
            run_intcode_program([2,0,0,1,UNKNOWN_OPCODE,99,99,99,99], [])

    def test_large_numbers(self):
        self.assertEqual(
            [34915192*34915192],
            run_intcode_program([1102,34915192,34915192,7,4,7,99,0])[1]
        )
        self.assertEqual(
            [1125899906842624],
            run_intcode_program([104,1125899906842624,99])[1]
        )

    def test_distant_memory(self):
        self.assertEqual(
            [37],
            run_intcode_program([3,1989,4,1989,99],[37])[1]
        )
        self.assertEqual(
            ([1101,1,12,7,4,7,99,13], [13]),
            run_intcode_program([1101,1,12,7,4,7,99])
        )
        self.assertEqual(
            [109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99],
            run_intcode_program([109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99])[1]
        )


def run():
    unittest.main()


if __name__ == '__main__':
    run()
